/*
 * The PDS is used to enter configuration data.
 *
 * This file is a template that shows all elements that exist.
 * Sections PROG_PINS_CFG, HIF_PINS_CFG and HF_CLK contain hardware default values.
 * Please do not use it with real hardware: copy it and update it to fit to your own hardware. 
 *
 * It should then be processed by the pds_compress script to generate the compressed
 * data to be provided either to the Linux driver or to the Full MAC driver.
 *
 * Unneeded sections can be commented (like in ANSI C) or deleted.
 */

#include "definitions-3.0.0.in"

// PDS API version
HEADER: {
    VERSION_MAJOR: 3,
    VERSION_MINOR: 0
},

/**********************/
/* Pins configuration */
/**********************/

// Pad configuration of programmable pins
PROG_PINS_CFG: {
    // For each PROGrammable pin in this section
    // SLEW_RATE sets the maximum slew rate on the pin. Type: integer value between 0 and 6 (6=max drive strength)
    // PULL_UP_DOWN allows to add a pull-up or pull-down on the pad. Type: enum = 'none', 'down', 'up'
    // SLEEP_CFG allows to add a pull-up or pull-down on the pad while in sleep mode. Type: enum = 'none', 'down', 'up', 'maintain'
    //          for the case of pads used as gpio it is also possible to maintain the current driven gpio value
    // PIN_MODE allows to configure the pin in tristate, functional mode or gpio. Type: enum = 'tri', 'func', 'gpio'
    // GPIO_ID allows to assign a GPIO_ID to a given pin when configured as gpio. Type = char must be an UPPER case letter
    GPIO_FEM_1: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: A
    },
    GPIO_FEM_2: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: B
    },
    GPIO_FEM_3: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: C
    },
    GPIO_FEM_4: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: D
    },
    GPIO_FEM_5: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: E
    },
    GPIO_FEM_6: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: F
    },
    GPIO_PDET: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: G
    },
    GPIO_PTA_TX_CONF: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: H
    },
    GPIO_PTA_RF_ACT: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: I
    },
    GPIO_PTA_STATUS: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: J
    },
    GPIO_PTA_FREQ: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: K
    },
    GPIO_WUP: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: L
    },
    GPIO_WIRQ: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: M
    },
    RESERVE2: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: O
    }
},

// Pad configuration of HIF pins
HIF_PINS_CFG: {
    // For each HIF pin in this section
    // SLEW_RATE sets the maximum slew rate on the pin. Type: integer value between 0 and 6
    // PULL_UP_DOWN allows to add a pull-up or pull-down on the pad. Type: enum = 'none', 'down', 'up'
    // SLEEP_CFG allows to add a pull-up or pull-down on the pad while in sleep mode. Type: enum = 'none', 'down', 'up'
    SDIO_CLK_SPI_CLK: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_CMD_SPI_MOSI: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_D0_SPI_MISO: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: down
    },
    SDIO_D1_SPI_WIRQ: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_D2_HIF_SEL: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_D3_SPI_CSN: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    }
},

/***********************/
/* Clock configuration */
/***********************/

HF_CLK: {
    // XTAL_CFG allows to fine tune XTAL Oscillator frequency
    XTAL_CFG: {
        // CTUNE_FIX allows to set a high value capacitance on both Xi and Xo. Type: integer between 0 and 3 (default =3)
        CTUNE_FIX: 3,
        // CTUNE_XI allows to fine tune the capacitor on pin XTAL_I. Type: integer between 0 and 255 (default = 140)
        CTUNE_XI: 41,
        // CTUNE_XO similar to CTUNE_XI for XTAL_O pin
        CTUNE_XO: 41
    },
    // XTAL_SHARED to indicate if the crystal is shared with another IC and thus must be kept active during sleep
    XTAL_SHARED: no,
    // XTAL_TEMP_COMP to activate or deactivate the temperature compensation "enabled"/"disabled"
    XTAL_TEMP_COMP: disabled
},

/*********************/
/* FEM configuration */
/*********************/

FEM_CFG: {    
    FEM_CTRL_PINS_MATRIX: {
        //  FEM LUT is split in 4 sections
        //  A '1' activates a FEM pin at particular moment
        //  in each section the row index[2-0] bits correspond to the 3 selection input signals coming from the HW:
        //       index[0]=LNA_enable (currently not used then '0')
        //       index[1]=Rx_enable
        //       index[2]=Tx_enable
        //  pin FEM_4 is not present in theses tables because it is the PA_enable signal
        //             .-- FEM_6
        //             | .- FEM_5
        //             | |.- FEM_3
        //             | ||.- FEM_2
        //             | |||.- FEM_1
        NO_PTA: [ //   | ||||
                     0b0_0000, // Reserved
                     0b0_0000, // Reserved
                     0b0_0000, // Reserved
                     0b0_0000, // Reserved
                     0b0_0000, // Reserved
                     0b0_0000, // Reserved
                     0b0_0000, // Reserved
                     0b0_0000  // Reserved
        ],
        COEX_EXCLUSIVE: [
                     0b0_0000, // Coex has priotiry ( Wlan Inactive )
                     0b0_0000, // Coex has priotiry ( Wlan Inactive )
                     0b0_0000, // Coex has priotiry ( Wlan RX )
                     0b0_0000, // Coex has priotiry ( Wlan tbd )
                     0b0_0000, // Coex has priotiry ( Wlan TX )
                     0b0_0000, // Coex has priotiry ( Wlan tbd )
                     0b0_0000, // Reserved
                     0b0_0000  // Reserved
        ],
        WLAN_EXCLUSIVE: [
                     0b0_0000, // WLAN is inactive, Give Antenna to Coex
                     0b0_0000, // WLAN is inactive, Give Antenna to Coex
                     0b0_0000, // WLAN RX
                     0b0_0000, // WLAN tbd
                     0b0_0000, // WLAN TX
                     0b0_0000, // WLAN tbd
                     0b0_0000, // Reserved
                     0b0_0000  // Reserved
        ],
        COEX_WL_COMBINED: [
                     0b0_0000, // WLAN is inactive, Give Antenna to Coex
                     0b0_0000, // WLAN is inactive, Give Antenna to Coex
                     0b0_0000, // Coex + WLAN RX
                     0b0_0000, // tbd
                     0b0_0000, // Coex + WLAN TX
                     0b0_0000, // tbd
                     0b0_0000, // Reserved
                     0b0_0000  // Reserved
        ]
    },

    FEM_TIMINGS: {
        // Delays are in 12.5ns units
        TX_EN_DELAY:  0,
        TX_DIS_DELAY: 0,
        PA_EN_DELAY:  0,
        PA_DIS_DELAY: 0,
        RX_EN_DELAY:  0,
        RX_DIS_DELAY: 0
    }
},

/***********************/
/* Power configuration */
/***********************/

// Tx power-related information
RF_POWER_CFG: {
    // Designate the rf port affected by the following configurations
    // RF_PORT_1, RF_PORT_2, RF_PORT_BOTH(default)
    RF_PORT: RF_PORT_BOTH,

    // The max Tx power value in quarters of dBm. Type: signed integer between -128 and 127
    // Resultant covered range in dBm: [-32; 31.75]
    // It is used to limit the Tx power. Thus a value larger than 80 does not make sens.
    MAX_OUTPUT_POWER_QDBM: 80,

    // Front-end loss (loss between the chip and the antenna) in quarters of dB.
    // Type: signed integer between -128 and 127
    // Resultant covered range in dB: [-32; 31.75]
    // This value must be positive when the front end attenuates the signal and negative when it amplifies it.
    FRONT_END_LOSS_CORRECTION_QDB: 0,

    // Backoff vs. Modulation Group vs Channel
    // CHANNEL_NUMBER: Designate a channel number(an integer) or a range of channel numbers (an array)
    // CHANNEL_NUMBER: [3, 9] : Channels from 3 to 9
    //
    // BACKOFF_VAL is given in quarters of dB. Type : unsigned integer. Covered range in dB: [0; 63.75]
    // Each value sets a backoff (=additional attenuation) for a group of modulations.
    // A modulation group designates a subset of modulations :
    //   *  MOD_GROUP_0 : B_1Mbps, B_2Mbps, B_5.5Mbps, B_11Mbps
    //   *  MOD_GROUP_1 : G_6Mbps, G_9Mbps, G_12Mbps, N_MCS0,  N_MCS1,
    //   *  MOD_GROUP_2 : G_18Mbps, G_24Mbps, N_MCS2, N_MCS3,
    //   *  MOD_GROUP_3 : G_36Mbps, G_48Mbps, N_MCS4, N_MCS5
    //   *  MOD_GROUP_4 : G_54Mbps, N_MCS6
    //   *  MOD_GROUP_5 : N_MCS7
    //   BACKOFF_VAL: [MOD_GROUP_0, ..., MOD_GROUP_5]
    BACKOFF_QDB: [
        {
            CHANNEL_NUMBER: 1,
            BACKOFF_VAL: [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER: [2,3],
            BACKOFF_VAL: [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER: [4, 9],
            BACKOFF_VAL: [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER: [10,12],
            BACKOFF_VAL: [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER: 13,
            BACKOFF_VAL: [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER: 14,
            BACKOFF_VAL: [0, 0, 0, 0, 0 ,0]
        }
    ],

    RSSI_CORRECTION: 0
},

/********************/
/* RF configuration */
/********************/

RF_ANTENNA_SEL_DIV_CFG: {
    //
    // Antenna selection:
    //   - TX1_RX1
    //   - TX2_RX2
    //   - TX1_RX2
    //   - TX2_RX1
    //   - TX12_RX12
    //
    RF_PORTS: TX1_RX1,

    //
    // Diversity control mode:
    //   - OFF
    //   - INTERNAL
    //   - EXTERNAL
    // For the INTERNAL value, RF_PORTS must be set to TX12_RX12
    //
    DIVERSITY: OFF,

    // External switch control antenna
    EXT_SWITCH_CONTROL: {
        NB_ANTENNA: 3,
        NB_GPIO: 3,
        //           .---------- GPIO_ID
        //          |  .------- State Antenna_1
        //          |  |  .---- State Antenna_2
        //          |  |  |  .- State Antenna_3
        //          |  |  |  |
        GPIO_ID_1: [A, 1, 0, 0],
        GPIO_ID_2: [B, 0, 1, 0],
        GPIO_ID_3: [C, 0, 0, 1]
    }
},

/*********************************/
/* RF test feature configuration */
/*********************************/

TEST_FEATURE_CFG: {
    // TEST_CHANNEL_FREQ can designate either a Wi-Fi channel or a frequency in MHz :
    //   - [1-14]: Wi-Fi channel to use
    //   - [2300 - 2600]: RF frequency in MHz
    //
    TEST_CHANNEL_FREQ: 11,
    // TEST_MODE selects the activated test feature: enum = 'rx', 'tx_packet', 'tx_cw'
    TEST_MODE: tx_packet,
    // TEST_IND period in ms at which an indication message is sent.
    //       In the case of rx test, it returns the measurement results (PER)
    TEST_IND: 1000,

    // CFG_TX_CW: additional configuration for tx_cw mode
    CFG_TX_CW: {
        // CW_MODE CW mode: enum 'single' or 'dual'
        CW_MODE: single,
        // FREQ1 frequency offset -31 to 31 (in 312.5kHz)
        FREQ1: 1,
        // FREQ2 frequency offset -31 to 31 (in 312.5kHz)
        FREQ2: 2,
        // MAX_OUTPUT_POWER indicates the max Tx power value in quarters of dBm
        MAX_OUTPUT_POWER: 68
    },

    // CFG_TX_PACKET: additional configuration for tx_packet mode
    CFG_TX_PACKET: {
        // FRAME_SIZE_BYTE frame size in byte (without CRC) from 25 to 4091
        FRAME_SIZE_BYTE: 3000,
        // IFS_US interframe spacing in us from 0 to 255
        IFS_US: 0,
        // HT_PARAM HT format (mixed mode or greenfield), enum: 'MM' or 'GF'
        HT_PARAM: MM,
        // RATE rate selection, enum : B_1Mbps, B_2Mbps, B_5_5Mbps,
        //     B_11Mbps, G_6Mbps, G_9Mbps, G_12Mbps, G_18Mbps,
        //     G_24Mbps, G_36Mbps, G_48Mbps, G_54Mbps, N_MCS0,
        //     N_MCS1, N_MCS2, N_MCS3, N_MCS4, N_MCS5, N_MCS6, N_MCS7
        RATE: N_MCS7,
        // NB_FRAME number of frames to send before stopping. 0 means infinite. Integer from 0 to 65535.
        NB_FRAME: 0,
        // (REGION) REGULATORY MODE : the WFM200 can be certified for US (FCC), Europe(ETSI) or Japan
        // and thus its Tx power can be limited to fulfill these radio transmission specifications.
        // It is possible to force here the different regulatory modes but only for the TX power, not the channel usage limitation.
        // enum: CERTIFIED_FCC, CERTIFIED_ETSI, CERTIFIED_JAPAN, CERTIFIED_Unrestricted (no power limitation), CERTIFIED_All (applies the most restrictive limitation)
        REG_MODE: CERTIFIED_All
    },

    // RX: additional configuration for rx mode
    RX: { }
}
