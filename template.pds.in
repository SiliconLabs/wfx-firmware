/*
 * This PDS is only there to test pds_compress.py. Do not use it with real
 * harwdare
 */
#include "definitions-1.2.14.in"

    /**********************/
    /* Pins configuration */
    /**********************/

    // Information about this PDS version
    HEADER_ELT: {
        VERSION_MAJOR: 1,
        VERSION_MINOR: 3,
    },

    // Pad configuration of programmable pins
    PROG_PINS_CFG_ELT: {
        // For each PROGrammable PIN in this section
        // SLEW_RATE sets the maximum slew rate on the pin. Type: integer value between 0 and 6 (6=max drive strength)
        // PULL_UP_DOWN allows to add a pull-up or pull-down on the pad. Type: enum = 'none', 'down', 'up'
        // SLEEP_CFG allows to add a pull-up or pull-down on the pad while in sleep mode. Type: enum = 'tri', 'down', 'up', 'maintain'
        //          for the case of pads used as gpio it is also possible to maintain the current driven gpio value
        // PIN_MODE allows to configure the pin in tristate, functional mode or gpio. Type: enum = 'tri', 'func', 'gpio'
        // GPIO_ID allows to assign a GPIO_ID to a given pin when configured as gpio. Type = char must be an UPPERCASE letter
        GPIO_FEM_1: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: A,
        },
        GPIO_FEM_2: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: B
        },
        GPIO_FEM_3: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: C
        },
        GPIO_FEM_4: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: D
        },
        GPIO_FEM_5: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: E
        },
        GPIO_FEM_6: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: F
        },
        GPIO_PDET: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: G
        },
        GPIO_PTA_TX_CONF: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: tri,
            GPIO_ID: H
        },
        GPIO_PTA_RF_ACT: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: tri,
            GPIO_ID: I
        },
        GPIO_PTA_STATUS: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: tri,
            GPIO_ID: J
        },
        GPIO_PTA_FREQ: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: tri,
            GPIO_ID: K
        },
        GPIO_WUP: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: func,
            GPIO_ID: L
        },
        GPIO_WIRQ: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: tri,
            GPIO_ID: M
        },
        RESERVE2: {
            SLEW_RATE: 4,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri,
            PIN_MODE: tri,
            GPIO_ID: O
        }
    },

    // Pad configuration of HIF pins
    HIF_PINS_CFG_ELT: {
        // For each HIF PIN in this section
        // SLEW_RATE sets the maximum slew rate on the pin. Type: integer value between 0 and 6
        // PULL_UP_DOWN allows to add a pull-up or pull-down on the pad. Type: enum = 'none', 'down', 'up'
        // SLEEP_CFG allows to add a pull-up or pull-down on the pad while in sleep mode. Type: enum = 'tri', 'down', 'up'
        SDIO_CLK_SPI_CLK: {
            SLEW_RATE: 6,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri
        },
        SDIO_CMD_SPI_MOSI: {
            SLEW_RATE: 6,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri
        },
        SDIO_D0_SPI_MISO: {
            SLEW_RATE: 6,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri
        },
        SDIO_D1_SPI_WIRQ: {
            SLEW_RATE: 6,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri
        },
        SDIO_D2_HIF_SEL: {
            SLEW_RATE: 6,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri
        },
        SDIO_D3_SPI_CSN: {
            SLEW_RATE: 6,
            PULL_UP_DOWN: none,
            SLEEP_CFG: tri
        }
    },

    /***********************/
    /* Clock configuration */
    /***********************/

    HF_CLK: {
        // XTAL_CFG allows to fine tune XTAL Oscillator frequency
        XTAL_CFG: {
            // CTUNE_FIX allows to set a high value capacitance on both Xi and Xo. Type: integer between 0 and 3 (default =3)
            CTUNE_FIX: 3,
            // CTUNE_XI allows to fine tune the capacitor on pin XTAL_I. Type: integer between 0 and 255 (default = 140)
            CTUNE_XI: 41,
            // CTUNE_XO similar to CTUNE_XI for XTAL_O pin
            CTUNE_XO: 41,
        },
        // XTAL_SHARED to indicate if the crystal is shared with another IC and thus must be kept active during sleep
        XTAL_SHARED : no,
        // XTAL_TEMP_COMP to activate or deactivate the temperature compensation "enabled"/"disabled"
        XTAL_TEMP_COMP : disabled
    },

    /*********************/
    /* FEM configuration */
    /*********************/

    FEM_CTRL_PINS_MATRIX: {
        //  FEM LUT is split in 4 sections
        //  A '1' activates a FEM pin at particular moment
        //  in each section the row index[2-0] bits correspond to the 3 selection input signals coming from the HW:
        //       index[0]=LNA_enable (currently not used then '0')
        //       index[1]=Rx_enable
        //       index[2]=Tx_enable
        //  pin FEM_4 is not present in theses tables because it is the PA_enable signal
        //             .-- PIN
        //             |.-- FEM_5   /!\
        //             || .- FEM_6  /!\
        //             || |.- FEM_3
        //             || ||.- FEM_2
        //             || |||.- FEM_1
        NO_PTA: [ //   || ||||
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
        ],
        COEX_EXCLUSIVE: [
                     0b00_0000, // Coex has priority ( Wlan Inactive )
                     0b00_0000, // Coex has priority ( Wlan Inactive )
                     0b00_0000, // Coex has priority ( Wlan RX )
                     0b00_0000, // Coex has priority ( Wlan tbd )
                     0b00_0000, // Coex has priority ( Wlan TX )
                     0b00_0000, // Coex has priority ( Wlan tbd )
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
        ],
        WLAN_EXCLUSIVE: [
                     0b00_0000, // WLAN is inactive, Give Antenna to Coex
                     0b00_0000, // WLAN is inactive, Give Antenna to Coex
                     0b00_0000, // WLAN RX
                     0b00_0000, // WLAN tbd
                     0b00_0000, // WLAN TX
                     0b00_0000, // WLAN tbd
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
        ],
        COEX_WL_COMBINED: [
                     0b00_0000, // WLAN is inactive, Give Antenna to Coex
                     0b00_0000, // WLAN is inactive, Give Antenna to Coex
                     0b00_0000, // Coex + WLAN RX
                     0b00_0000, // tbd
                     0b00_0000, // Coex + WLAN TX
                     0b00_0000, // tbd
                     0b00_0000, // Reserved
                     0b00_0000, // Reserved
        ],
    },

    FEM_TIMINGS: {
        TX_EN_DELAY:  0,
        TX_DIS_DELAY: 0,
        PA_EN_DELAY:  0,
        PA_DIS_DELAY: 0,
        RX_EN_DELAY:  0,
        RX_DIS_DELAY: 0,
    },

    /***********************/
    /* Power configuration */
    /***********************/

    // Tx power-related information
    MAX_TX_POWER_CONF: {
        // Designate the rf port affected by the following configurations 
        // RF_PORT_1, RF_PORT_2, RF_PORT_BOTH(default)
        RF_PORT: RF_PORT_BOTH,
        
        // Each triplet gives the max Tx power value in OFDM and in CCK/DSSS vs. the channel number
        // UP_TO_CHANNEL_NUMBER indicates the channel number up to which the max Tx power value is applicable. Type: integer between 1 and 14
        // OFDM indicates the max Tx power value in quarters of dBm for the OFDM mode. Type: signed integer between -128 and 127
        // CCK_DSSS indicates the max Tx power value in quarters of dBm for the CCK/DSSS mode. Type: signed integer between -128 and 127
        // Resultant covered range in dBm: [-32; 31.75]
        MAX_OUTPUT_POWER_QDBM: [
            {
                UP_TO_CHANNEL_NUMBER: 1,
                OFDM: 68,
                CCK_DSSS: 64
            }, {
                UP_TO_CHANNEL_NUMBER: 10,
                OFDM: 80,
                CCK_DSSS: 72
            }, {
                UP_TO_CHANNEL_NUMBER: 14,
                OFDM: 64,
                CCK_DSSS: 72
            }
        ],

        // Front-end loss (loss between the chip and the antenna) in quarters of dB. Type: signed integer between -128 and 127
        // Resultant covered range in dB: [-32; 31.75]
        FRONT_END_LOSS_CORRECTION_QDB: 0,

        // Backoff vs. Mod
        // MOD rate selection, enum : B_1Mbps, B_2Mbps, B_5.5Mbps,
        //     B_11Mbps, G_6Mbps, G_9Mbps, G_12Mbps, G_18Mbps,
        //     G_24Mbps, G_36Mbps, G_48Mbps, G_54Mbps, N_MCS0,
        //     N_MCS1, N_MCS2, N_MCS3, N_MCS4, N_MCS5, N_MCS6, N_MCS7
        // BACKOFF_VAL is given in quarters of dB. Type : unsigned integer. Covered range in dB: [0; 63.75]
        VSWR_BACKOFF_QDB: [
            {
                MOD: B_1Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: B_2Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: B_5_5Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: B_11Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_6Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_9Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_12Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_18Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_24Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_36Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_48Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: G_54Mbps,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS0,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS1,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS2,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS2,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS3,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS4,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS5,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS6,
                BACKOFF_VAL: 0
            }, {
                MOD: N_MCS7,
                BACKOFF_VAL: 0
            }
        ],
        // TX_POWER_TEMP_COMP to activate or deactivate the temperature compensation "enabled"/"disabled" 
        TX_POWER_TEMP_COMP : disabled
    },

    /********************/
    /* RF configuration */
    /********************/

    RF_ANTENNA_SEL_DIV_CONF: {
        /*
         * Antenna selection:
         *   - TX1_RX1
         *   - TX2_RX2
         *   - TX1_RX2
         *   - TX2_RX1
         *   - TX1&2_RX1&2
         */
        RF_PORTS: TX1_RX1,

        /*
         * Diversity control mode:
         *   - OFF
         *   - INTERNAL
         *   - EXTERNAL
         * For the INTERNAL value, RF_PORTS must be set to TX1&2_RX1&2
         */
        DIVERSITY: OFF,

        // External switch control antenna
        EXT_SWITCH_CONTROL: {
            NB_ANTENNA: 3,
            NB_GPIO: 3,
            //           .---------- GPIO_ID
            //          |  .------- State Antenna_1
            //          |  |  .---- State Antenna_2
            //          |  |  |  .- State Antenna_3
            //          |  |  |  |
            GPIO_ID_1: [A, 1, 0, 0],
            GPIO_ID_2: [B, 0, 1, 0],
            GPIO_ID_3: [C, 0, 0, 1]
        },
    },

    /*************************/
    /* Tests and debug modes */
    /*************************/

    TEST_FEATURE_CFG_ELT: {
        // Wi-Fi channel to use. Accepted range is from 1 to 14.
        TEST_CHANNEL: 11,
        // TEST_MODE selects the activated test feature: enum = 'rx', 'tx_packet', 'tx_cw'
        TEST_MODE: tx_packet,
        // TEST_IND period in ms at which an indication message is sent.
        //       In the case of rx test, it returns the measurement results (PER)
        TEST_IND: 1000,

        // CFG_TX_CW: additional configuration for tx_cw mode
        CFG_TX_CW: {
            // CW_MODE CW mode: enum 'single' or 'dual'
            CW_MODE: single,
            // FREQ1 frequency offset -31 to 31 (in 312.5kHz)
            FREQ1: 1,
            // FREQ2 frequency offset -31 to 31 (in 312.5kHz)
            FREQ2: 2,
            // MAX_OUTPUT_POWER indicates the max Tx power value in quarters of dBm
            MAX_OUTPUT_POWER: 68
        },

        // CFG_TX_PACKET: additional configuration for tx_packet mode
        CFG_TX_PACKET: {
            // FRAME_SIZE_BYTE frame size in byte (without CRC) from 25 to 4091
            FRAME_SIZE_BYTE: 3000,
            // IFS_US interframe spacing in us from 0 to 255
            IFS_US: 0,
            // HT_PARAM HT format (mixed mode or greenfield), enum: 'MM' or 'GF'
            HT_PARAM: MM,
            // RATE rate selection, enum : B_1Mbps, B_2Mbps, B_5_5Mbps,
            //     B_11Mbps, G_6Mbps, G_9Mbps, G_12Mbps, G_18Mbps,
            //     G_24Mbps, G_36Mbps, G_48Mbps, G_54Mbps, N_MCS0,
            //     N_MCS1, N_MCS2, N_MCS3, N_MCS4, N_MCS5, N_MCS6, N_MCS7
            RATE: N_MCS7,
            // NB_FRAME number of frames to send before stopping. 0 means
            // infinite. integer from 0 to 65535.
            NB_FRAME: 0
        },

        // RX: additional configuration for rx mode
        RX: { },
    },

    /*********************/
    /* PTA configuration */
    /*********************/

    PTA_CFG_ELT: {
        // PTA Mode selection
        // 0 : No PTA
        // 1 : 2-Wire
        // 2 : 3-Wire
        PTA_MODE: 2,

        // PTA settings :
        // setting the EnOverrideBt bit to 1 indicate the BT grant could be broken if WLAN won the arbitration
        // setting the NoCombine bit to 1 forces EPTA
        // setting the GrantBt bit to 1 allows BT to override WLAN
        // setting the GrantWlan bit to 1 allows WLAN to override BT
        // setting the ProtectWlanRx bit to 1 prevents BT to be granted when WLAN is receiving a response
        // setting the ProtectWlanTx bit to 1 prevents BT to be granted when WLAN is transmitting
        // setting the TxConfControl bit to 1 specifies the TX conf value
        SETTINGS: 0b_0101_0110,
        //           |||| |||'- EnOverrideBt:1
        //           |||| ||'-- NoCombine:1
        //           |||| |'--- GrantBt:1
        //           |||| '---- GrantWlan:1
        //           |||'------ ProtectWlanRx:1
        //           ||'------- ProtectWlanTx:1
        //           |'-------- TxConfControl:1
        //           '--------- Reserved:1

        // PTA invert pin selection
        // when a bit is set to 1, the pin logic is inverted
        PIN_INVERT: 0b_0000_0000,
        //             |||| |||+ invert PTA_RF_ACT  (input)
        //             |||| ||+  invert PTA_STATUS  (input)
        //             |||| |+   invert PTA_FREQ    (input)
        //             |||| +    invert PTA_TX_CONF (input)
        //             |||+      invert PTA_FREQ    (output)
        //             ||+       invert PTA_TX_CONF (output)
        //             ++        Reserved:2

        // TX conf valid time it the time in us from BT_RF_ACTIVE to TX_CONF assertion
        TX_CONF_TIMING: 0x48,
        //                ++ TXConfValideTime:7
        //                +  Reserved:1

        // Priority sampling time is the time in us after BT_RF_ACTIVE when BT_FREQ should be sampled
        // TX RX sampling time is the time in us from BT_RF_ACTIVE to the sampling if TXRX
        STATUS_TIMING: 0x3209,
        //               ||++ PrioritySamplingTime:8
        //               ++   TxRxSamplingTime:8

        // priority matrix given for BT
        PRIORITY: 0x61
        //          |+ Priority 0:4
        //          +  Priority 1:4
    },

